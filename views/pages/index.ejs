
<!DOCTYPE html>
<html>
    <head>
        <%-  include('../partials/head') -%>
        <title>Social Media</title>
      </head>
    <body>
        <%-  include('../partials/header') -%>
    <h2 class="text-center"> <%- month %> / <%- year %> </h2>
    <div id="calendar-container">
        <div class="jumbotron jumbotron-fluid text-center" style="padding-top:0px">
        <% for (var i = 0; i< m.length; i++) { %>
            <div class="week-container" style="background-color:white;height:130px;width:100%;border:dotted 1px">
                <ul class="list-group list-group-horizontal" style="width:100%;height:100%"> 
                <% for (var j=0; j< m[i].length; j++) {%>
                    <li class="list-group-item reservation"  data-calendar-reservation="<%= month %>/<%= m[i][j] %>/<%= year %>" style="width:300px" onclick="reserveModal(this)"> <%- m[i][j] %> </li> 
                <% } %>
                </ul>
            </div>
        <% } %>
        </div>
    </div>

    <!-- INITIALIZED ID RESERVATION -->
    <!-- MODAL IS DYNAMICALLY POPULATED. -->
    <div class="modal fade" id="reservation" class="reservation" role="dialog">
    </div>

    <!-- Optional JavaScript -->
    <!-- jQuery first, then Popper.js, then Bootstrap JS -->
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="./js/axiosCallBacks.js" type="text/javascript"></script>

    <script type="text/JavaScript">

    let llama_chosen; 
    let date_chosen;
    
    //Modal that shows up when user clicks a date block 
    function reserveModal(chosenDate)
    {
        //alert(chosenDate.innerHTML);

        //Grab custom data attribute
        let reservedDate = $(chosenDate).attr("data-calendar-reservation") // will return the string "123"$('data-calendar-reservation');

        date_chosen = reservedDate;

        //Dynamically Render Information
        document.getElementById('reservation').innerHTML =
        ` <div class="modal-dialog">
           <!-- Modal content-->
           <div class="modal-content">
              <div class="modal-header">
                 <button type="button" class="close" data-dismiss="modal">&times;</button>
                 <h4 class="modal-title">Reservation Date - ${reservedDate}</h4>
              </div>
              <div class="modal-body">
                <p>Choose your llama!</p>
                <select class="custom-select" id="selectLlama" onchange="getBackgroundInfo(this)">
                </select>
                 <div id="characterBackground" class="card">

                </div>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="reserveDate('${reservedDate}')">Reserve</button>
                <button type="button" class="btn btn-primary" onclick="resetData()" data-dismiss="modal">Close</button>
             </div>
           </div>
        </div>
        `;

        //Show the Modal Once the Information is Rendered 
        $('#reservation').modal('show');
    }

    displayAllReservations();

    function displayAllReservations()
    {
        let successCallback = function(response)
        {
            response.data.forEach(dateMatch);         
        };

        let errorCallback = function(response)
        {

        };

        apiGetAllReservation('', successCallback, errorCallback);
    }

    //If Date Matches, Display The Reservation is taken
    function dateMatch(value)
    {
        let formattedDate = formatDate(value.date_reserved, 'fullDate');

        //console.log(formattedDate);

        document.querySelectorAll('.reservation').forEach(function(element, index) {

            let elementReservation = $(element).attr("data-calendar-reservation");

            if(elementReservation == formattedDate)
            {
                element.innerHTML = 'Date Taken';
                element.style.backgroundColor = "grey";
                element.style.pointerEvents = "none";
            }
            else if(isNaN(formatDate(elementReservation,'getDate'))) //disable element blocks with date as 0. means it does not exist in month
            {
                element.style.pointerEvents = "none";
                element.innerHTML = '';
            }
        });
    }

    //Format the date that goes in. Value is the date and userDateFilter is type of date data returned
    function formatDate(value,userDateFilter)
    {
        let d = new Date(value);

        if(userDateFilter == 'fullDate')
        {
            return d.getMonth()+1 + '/' + d.getDate() + '/' + d.getFullYear();
        }
        else if (userDateFilter == 'getMonth')
        {
            return d.getMonth()+1;
        }
        else if(userDateFilter == 'getYear')
        {
            return d.getFullYear();
        }
        else if(userDateFilter == 'getDate')
        {
            return d.getDate();
        }
    }

    function resetData()
    {
        llama_chosen = '';
        date_chosen = '';
    }
   
    //Generate Select Element.
    document.body.addEventListener("click", function (event) {
        if (event.target.classList.contains("reservation")) 
        {
            //API Call to llama route to pull all llamas and generate options to append to select.
            axios
            .get('api/reservation/llama/all')
            .then(function (llamas) 
            {
            //When user clicks button and page NOT refreshed, it prevents the option values from duplicating
            $('#selectLlama')
                .find('option')
                .remove()
                .end()
                .append('<option value="Choose">Choose Llama...</option>')
                .val('Choose Llama...');

                var selectOptions = llamas.data.forEach(function (value, index) {
                    $('#selectLlama').append(`<option value=${value.id}>${value.name}</option>`);   
                });
            })
        }
    });

    //User chooses a character with onchange event, a mini card will show small data about the character.
    function getBackgroundInfo(llama) {

        let characterBGContainer = document.getElementById("characterBackground");

        let successCallback = function(result)
        {
            let populateBGInfo = `<img class="card-img-top" src="${result.data.image_url}" alt="Card image cap" width=400 height=350>
                    <div class="card-body">
                        <h5 class="card-title">I AM ${result.data.name}</h5>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">Origin: ${result.data.origin}</li>
                        <li class="list-group-item">Feed: ${result.data.feed.feed}</li>
                    </ul>`;

                characterBGContainer.innerHTML = populateBGInfo;
        }

        let errorCallback = function(result)
        {
            alert("error!");
        }

        //Send the llama id value to generate the llama background info 
        let data = {'llama_id': llama.value}

        apiGetSingleLlama(data, successCallback, errorCallback);

        //Set the llama value globally
        llama_chosen =  llama.value;

    }

  
    //New Reservation to be created for user
    function reserveDate(chosenDate)
    {
        console.log(llama_chosen);
        if(!llama_chosen || llama_chosen == 'Choose')
        {
            alert('Please choose a valid llama!');

            //setTimeout(function(){$('#reservation').modal('show')}, 900);
            return;
        }

        let successCallback = function(response)
        {
            document.getElementById('reservation').innerHTML =
            ` <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">SUCCESS! RESERVED FOR ${date_chosen}</h4>
                </div>
                <div class="modal-body">
                    DATE RESERVED! THANK YOU FOR YOUR PATRONAGE!
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>
            </div>
            `;

            //Show the Modal Once the Information is Rendered
            //Have to set a small timeout due to issue with modal showing up immediately 
            setTimeout(function(){$('#reservation').modal('show')}, 900);

            //Re-render the calendar display to show taken dates
            displayAllReservations();

            resetData();

        };

        let errorCallback = function(error)
        {

        }; 


        let data = {"dateReserved": chosenDate, "llamaChosen": llama_chosen};

        apiInsertReservation(data, successCallback, errorCallback);
    }


        $(document).ready(function(e) {
        // Initializing our modal without having to call the button.
        $('.reservation').modal({
            backdrop: 'static',
            keyboard: false,
            show: false,
        });
    });

    </script>
    </body>
</html>